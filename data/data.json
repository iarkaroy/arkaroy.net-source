{"projects":[{"content":"\n![Media Manager](/images/media-manager-web-app-01.jpg)\n\n![Media Manager](/images/media-manager-web-app-02.jpg)\n\n![Media Manager](/images/media-manager-web-app-03.jpg)\n\n![Media Manager](/images/media-manager-web-app-04.jpg)\n\n![Media Manager](/images/media-manager-web-app-05.jpg)\n\n![Media Manager](/images/media-manager-web-app-06.jpg)","data":{"slug":"media-manager","date":"2014-09-13","title":"Media Manager","tags":["test","project"],"categories":["Web Application"],"thumb":"media-manager-thumb.jpg","overview":"An effort to make managing event albums easy. The main objective was to provide an easy-to-use user interface and responsiveness.","summary":"Build a web application for Creocraft Ventures – a leading event-management company having multiple offices around India. Creocraft needed a simple but efficient web application for managing and showcasing their project albums. The application, Media Manager, is able to create and manage various type of album according to the need of Creocraft. Media Manager is also able to help users to crop and re-size the images before uploading. Youtube link can also be embedded. The main website of Creocraft communicate with the application through a special channel, technically API, to showcase the albums on the website."},"isEmpty":false,"excerpt":"","html":"<p><img src=\"/images/media-manager-web-app-01.jpg\" alt=\"Media Manager\"></p>\n<p><img src=\"/images/media-manager-web-app-02.jpg\" alt=\"Media Manager\"></p>\n<p><img src=\"/images/media-manager-web-app-03.jpg\" alt=\"Media Manager\"></p>\n<p><img src=\"/images/media-manager-web-app-04.jpg\" alt=\"Media Manager\"></p>\n<p><img src=\"/images/media-manager-web-app-05.jpg\" alt=\"Media Manager\"></p>\n<p><img src=\"/images/media-manager-web-app-06.jpg\" alt=\"Media Manager\"></p>\n"},{"content":"\n![Creocraft Ventures](/images/creocraft-ventures-01.jpg)\n\n![Creocraft Ventures](/images/creocraft-ventures-02.jpg)\n\n![Creocraft Ventures](/images/creocraft-ventures-03.jpg)\n\n![Creocraft Ventures](/images/creocraft-ventures-04.jpg)\n\n![Creocraft Ventures](/images/creocraft-ventures-05.jpg)","data":{"slug":"creocraft-ventures","date":"2014-05-21","title":"Creocraft Ventures","tags":["test","project"],"categories":["Responsive Website"],"thumb":"creocraft-ventures-thumb.jpg","overview":"An effort to establish the brand through online presence. An experiment to appeal to the audience visually by providing an uncommon yet easy-to-navigate interface.","summary":"Build the website for Creocraft Ventures – a leading event-management company having multiple offices around India. Creocraft needed a easy-to-use but innovative online presence to stand with dignity before their clients. The website is built with HTML5 and styled with the latest CSS3 technology. The website is made fully responsive keeping in mind the ease of use and readability."},"isEmpty":false,"excerpt":"","html":"<p><img src=\"/images/creocraft-ventures-01.jpg\" alt=\"Creocraft Ventures\"></p>\n<p><img src=\"/images/creocraft-ventures-02.jpg\" alt=\"Creocraft Ventures\"></p>\n<p><img src=\"/images/creocraft-ventures-03.jpg\" alt=\"Creocraft Ventures\"></p>\n<p><img src=\"/images/creocraft-ventures-04.jpg\" alt=\"Creocraft Ventures\"></p>\n<p><img src=\"/images/creocraft-ventures-05.jpg\" alt=\"Creocraft Ventures\"></p>\n"}],"articles":[{"content":"ZIP is a very popular archive file format that supports lossless data compression. A .ZIP file may contain one or more files or folders that may have been compressed. ZIP files are used in almost every downloadable content as it is widely supported by almost all operating systems.\n\nZIP files generally use the file extensions \".zip\" or \".ZIP\" and the MIME media type `application/zip`. ZIP is used as a base file format by many applications and tools. Most popular among them is WordPress. They use zip file format for themes, plugins and the application itself. And everything is done dynamically.\n\nHere we will see how we can make a webpage act as an initializer to download a zip file. We will just provide the location of the file and PHP will download it to the user. In the back-end, the HTTP headers are responsible for the download. We will set the headers with PHP.\n\n```php\n// Name of the file to be downloaded as\n$filename = \"My Awesome Zip File.zip\";\n\n// Location of the file to be downloaded\n$filepath = \"/var/www/downloads/file.zip\";\n```\n\nThe `$filename` contains the name that will appear to the user and $filepath contains the full absolute path where the file is physically located.\n\nNow we will set the headers with PHP header(). And whenever any request comes to this page, browser will read the header response and start the download immediately.\n\n```php\nheader(\"Pragma: public\");\nheader(\"Expires: 0\");\nheader(\"Cache-Control: must-revalidate\");\nheader(\"Cache-Control: public\");\nheader(\"Content-Description: File Transfer\");\nheader(\"Content-type: application/octet-stream\");\nheader('Content-Disposition: attachment; filename=\"' . $filename . '\"');\nheader(\"Content-Transfer-Encoding: binary\");\nheader(\"Content-Length: \" . filesize($filepath));\nob_end_flush();\n@readfile($filepath);\n```\n\nOf course, the name of the downloaded file will be My Awesome Zip File.zip.","data":{"slug":"download-zip-file-dynamically-with-php","date":"2013-10-23","title":"Download ZIP File Dynamically with PHP","tags":["test","project"],"categories":["Responsive Website"],"thumb":"creocraft-ventures-thumb.jpg","excerpt":""},"isEmpty":false,"excerpt":"","html":"<p>ZIP is a very popular archive file format that supports lossless data compression. A .ZIP file may contain one or more files or folders that may have been compressed. ZIP files are used in almost every downloadable content as it is widely supported by almost all operating systems.</p>\n<p>ZIP files generally use the file extensions \".zip\" or \".ZIP\" and the MIME media type <code>application/zip</code>. ZIP is used as a base file format by many applications and tools. Most popular among them is WordPress. They use zip file format for themes, plugins and the application itself. And everything is done dynamically.</p>\n<p>Here we will see how we can make a webpage act as an initializer to download a zip file. We will just provide the location of the file and PHP will download it to the user. In the back-end, the HTTP headers are responsible for the download. We will set the headers with PHP.</p>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-comment\">// Name of the file to be downloaded as</span>\n$filename = <span class=\"hljs-string\">\"My Awesome Zip File.zip\"</span>;\n\n<span class=\"hljs-comment\">// Location of the file to be downloaded</span>\n$filepath = <span class=\"hljs-string\">\"/var/www/downloads/file.zip\"</span>;</code></pre>\n<p>The <code>$filename</code> contains the name that will appear to the user and $filepath contains the full absolute path where the file is physically located.</p>\n<p>Now we will set the headers with PHP header(). And whenever any request comes to this page, browser will read the header response and start the download immediately.</p>\n<pre><code class=\"hljs language-php\">header(<span class=\"hljs-string\">\"Pragma: public\"</span>);\nheader(<span class=\"hljs-string\">\"Expires: 0\"</span>);\nheader(<span class=\"hljs-string\">\"Cache-Control: must-revalidate\"</span>);\nheader(<span class=\"hljs-string\">\"Cache-Control: public\"</span>);\nheader(<span class=\"hljs-string\">\"Content-Description: File Transfer\"</span>);\nheader(<span class=\"hljs-string\">\"Content-type: application/octet-stream\"</span>);\nheader(<span class=\"hljs-string\">'Content-Disposition: attachment; filename=\"'</span> . $filename . <span class=\"hljs-string\">'\"'</span>);\nheader(<span class=\"hljs-string\">\"Content-Transfer-Encoding: binary\"</span>);\nheader(<span class=\"hljs-string\">\"Content-Length: \"</span> . filesize($filepath));\nob_end_flush();\n@readfile($filepath);</code></pre>\n<p>Of course, the name of the downloaded file will be My Awesome Zip File.zip.</p>\n"},{"content":"We often face a situation where we need to provide our users a way to upload image, pdf, document etc. The basic html form for file upload is able to handle this with the help of PHP. The basic process of uploading user submitted files to the server with PHP is fairly easy and simple. But there should be some security measures. What will happen if a bad user uploads a malicious file to our server?\n\nHere we will discuss some of this security measures to block the holes.\n\n## The Form\nBefore anything else, lets assume we have a form for the users to upload a file.\n\n```html\n<form action=\"<?php echo $_SERVER['PHP_SELF']; ?>\" method=\"post\" enctype=\"multipart/form-data\">\n    <label for=\"file\">Select File:</label>\n    <input type=\"file\" name=\"file\" id=\"file\">\n    <input type=\"submit\" name=\"upload\" value=\"Upload File\">\n</form>\n```\n\nRemember to use `method=\"post\"` whenever using a form for file upload. As you are already aware of, `enctype=\"multipart/form-data\"` is necessary because it tells the browser how to handle the data submitted as a file.\n\n## `$_FILES` Array\nAs soon as the file uploads, its details become available in the PHP’s $_FILES superglobal array.\n\nIf you add the following lines at the top of your page,\n\n```php\nif(isset($_POST['upload'])) { // Checking whether the form has been submitted\n    echo '<pre>';\n    print_r($_FILES);\n    echo '</pre>';\n}\n```\n\nand then you upload a file named flower.jpg. After you click ‘Upload File’ button, the details would be shown like this:\n\n```\nArray\n(\n    [file] => Array\n    (\n        [name] => flower.jpg\n        [type] => image/jpeg\n        [tmp_name] => C:\\xampp\\tmp\\php9F19.tmp\n        [error] => 0\n        [size] => 780831\n    )\n)\n```\n\n## The Errors\nBefore we continue, lets take a look at the errors we can have. In the previous example, the error is 0 which means that there is no error and the file has been successfully uploaded.\n\nLets take a look at the various error codes and what they mean.\n\n```\n0 => No Error\n1 => Exceeds upload_max_filesize in PHP configuration\n2 => Exceeds MAX_FILE_SIZE in hidden form field\n3 => File partially uploaded\n4 => No file to upload\n6 => No temporary upload folder defined\n7 => PHP failed to write to disk\n8 => A PHP extension prevent the file to be uploaded\n```\n\n## `MAX_FILE_SIZE`\nIn some cases, you might want to limit the size of the file to be uploaded. The MAX_FILE_SIZE field tells the browser to prevent the upload if it exceeds certain size. To use this feature, add the following code before the file input field.\n\n```php\n$max_size = 100 * 1024; // 100KB\n```\n\n```php\n<input type=\"hidden\" name=\"MAX_FILE_SIZE\" value=\"<?php echo $max_size; ?>\">\n```\n\nIf a file larger than the size set, the error will be set to 2 and it will not be attempted to upload.\n\n## Upload Directory\nWhen setting or specifying a directory to store the uploaded files, it is much professional to consider some points before doing so.\n\nThe directory where the uploaded file will live, must be set writable. In Linux, permission to the folder must be set to at least 755 or 775.\n\nIf the files are going to be accessible by public, the directory can be under the root of the server. But if the files are protected or contains sensitive data, then it is much wiser to put the directory outside the scope of the server root so that it cannot be accessible via public url.\n\n## Move Uploaded File\nIt is necessary to move the uploaded file to the directory specified for the files. Otherwise, the uploaded file will be lost as it is just saved as a temporary file at first.\n\nTo move the uploaded file, we will use `move_uploaded_file()` method:\n\n```php\nif(isset($_POST['upload'])) { // Checking whether the form has been submitted\n    ...\n    $directory = __DIR__ . '/uploads/';\n    if($_FILES['file']['error'] == 0) { // No error\n        $result = move_uploaded_file($_FILES['file']['tmp_name'], $directory . $_FILES['file']['name']);\n        if($result) {\n        echo $_FILES['file']['name'] . ' has been successfully uploaded.';\n        } else {\n        echo 'There was a problem uploading ' . $_FILES['file']['name'];\n        }\n    }\n    ...\n}\n```\n\nNow the uploaded files will the saved in the ‘uploads’ directory.\n\nWe have improved to some extent but there is a long path to go. We have not implemented any check on file types, file names and we have not provided any support for uploading multiple files. Also, if the uploaded files have same filename, the older one will be overwritten.\n\nTo avoid these situations and implement more validation, we will handle the upload a bit differently. We will Create a File Upload Class in PHP to handle the file upload more efficiently.","data":{"slug":"enhance-file-upload-security-with-php","date":"2013-09-17","title":"Enhance File Upload Security with PHP","categories":["Responsive Website"],"tags":["php","file upload","upload security"]},"isEmpty":false,"excerpt":"","html":"<p>We often face a situation where we need to provide our users a way to upload image, pdf, document etc. The basic html form for file upload is able to handle this with the help of PHP. The basic process of uploading user submitted files to the server with PHP is fairly easy and simple. But there should be some security measures. What will happen if a bad user uploads a malicious file to our server?</p>\n<p>Here we will discuss some of this security measures to block the holes.</p>\n<h2>The Form</h2>\n<p>Before anything else, lets assume we have a form for the users to upload a file.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">\"&#x3C;?php echo $_SERVER['PHP_SELF']; ?>\"</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">\"post\"</span> <span class=\"hljs-attr\">enctype</span>=<span class=\"hljs-string\">\"multipart/form-data\"</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">\"file\"</span>></span>Select File:<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">label</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"file\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"file\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"file\"</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"submit\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"upload\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"Upload File\"</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">form</span>></span></code></pre>\n<p>Remember to use <code>method=\"post\"</code> whenever using a form for file upload. As you are already aware of, <code>enctype=\"multipart/form-data\"</code> is necessary because it tells the browser how to handle the data submitted as a file.</p>\n<h2><code>$_FILES</code> Array</h2>\n<p>As soon as the file uploads, its details become available in the PHP’s $_FILES superglobal array.</p>\n<p>If you add the following lines at the top of your page,</p>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">isset</span>($_POST[<span class=\"hljs-string\">'upload'</span>])) { <span class=\"hljs-comment\">// Checking whether the form has been submitted</span>\n    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">'&#x3C;pre>'</span>;\n    print_r($_FILES);\n    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">'&#x3C;/pre>'</span>;\n}</code></pre>\n<p>and then you upload a file named flower.jpg. After you click ‘Upload File’ button, the details would be shown like this:</p>\n<pre><code>Array\n(\n    [file] => Array\n    (\n        [name] => flower.jpg\n        [type] => image/jpeg\n        [tmp_name] => C:\\xampp\\tmp\\php9F19.tmp\n        [error] => 0\n        [size] => 780831\n    )\n)\n</code></pre>\n<h2>The Errors</h2>\n<p>Before we continue, lets take a look at the errors we can have. In the previous example, the error is 0 which means that there is no error and the file has been successfully uploaded.</p>\n<p>Lets take a look at the various error codes and what they mean.</p>\n<pre><code>0 => No Error\n1 => Exceeds upload_max_filesize in PHP configuration\n2 => Exceeds MAX_FILE_SIZE in hidden form field\n3 => File partially uploaded\n4 => No file to upload\n6 => No temporary upload folder defined\n7 => PHP failed to write to disk\n8 => A PHP extension prevent the file to be uploaded\n</code></pre>\n<h2><code>MAX_FILE_SIZE</code></h2>\n<p>In some cases, you might want to limit the size of the file to be uploaded. The MAX_FILE_SIZE field tells the browser to prevent the upload if it exceeds certain size. To use this feature, add the following code before the file input field.</p>\n<pre><code class=\"hljs language-php\">$max_size = <span class=\"hljs-number\">100</span> * <span class=\"hljs-number\">1024</span>; <span class=\"hljs-comment\">// 100KB</span></code></pre>\n<pre><code class=\"hljs language-php\">&#x3C;input type=<span class=\"hljs-string\">\"hidden\"</span> name=<span class=\"hljs-string\">\"MAX_FILE_SIZE\"</span> value=<span class=\"hljs-string\">\"&#x3C;?php echo $max_size; ?>\"</span>></code></pre>\n<p>If a file larger than the size set, the error will be set to 2 and it will not be attempted to upload.</p>\n<h2>Upload Directory</h2>\n<p>When setting or specifying a directory to store the uploaded files, it is much professional to consider some points before doing so.</p>\n<p>The directory where the uploaded file will live, must be set writable. In Linux, permission to the folder must be set to at least 755 or 775.</p>\n<p>If the files are going to be accessible by public, the directory can be under the root of the server. But if the files are protected or contains sensitive data, then it is much wiser to put the directory outside the scope of the server root so that it cannot be accessible via public url.</p>\n<h2>Move Uploaded File</h2>\n<p>It is necessary to move the uploaded file to the directory specified for the files. Otherwise, the uploaded file will be lost as it is just saved as a temporary file at first.</p>\n<p>To move the uploaded file, we will use <code>move_uploaded_file()</code> method:</p>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">isset</span>($_POST[<span class=\"hljs-string\">'upload'</span>])) { <span class=\"hljs-comment\">// Checking whether the form has been submitted</span>\n    ...\n    $directory = <span class=\"hljs-keyword\">__DIR__</span> . <span class=\"hljs-string\">'/uploads/'</span>;\n    <span class=\"hljs-keyword\">if</span>($_FILES[<span class=\"hljs-string\">'file'</span>][<span class=\"hljs-string\">'error'</span>] == <span class=\"hljs-number\">0</span>) { <span class=\"hljs-comment\">// No error</span>\n        $result = move_uploaded_file($_FILES[<span class=\"hljs-string\">'file'</span>][<span class=\"hljs-string\">'tmp_name'</span>], $directory . $_FILES[<span class=\"hljs-string\">'file'</span>][<span class=\"hljs-string\">'name'</span>]);\n        <span class=\"hljs-keyword\">if</span>($result) {\n        <span class=\"hljs-keyword\">echo</span> $_FILES[<span class=\"hljs-string\">'file'</span>][<span class=\"hljs-string\">'name'</span>] . <span class=\"hljs-string\">' has been successfully uploaded.'</span>;\n        } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">'There was a problem uploading '</span> . $_FILES[<span class=\"hljs-string\">'file'</span>][<span class=\"hljs-string\">'name'</span>];\n        }\n    }\n    ...\n}</code></pre>\n<p>Now the uploaded files will the saved in the ‘uploads’ directory.</p>\n<p>We have improved to some extent but there is a long path to go. We have not implemented any check on file types, file names and we have not provided any support for uploading multiple files. Also, if the uploaded files have same filename, the older one will be overwritten.</p>\n<p>To avoid these situations and implement more validation, we will handle the upload a bit differently. We will Create a File Upload Class in PHP to handle the file upload more efficiently.</p>\n"},{"content":"I was developing a Web Crawler with PHP. But whenever I was crawling a url to get the links from that url, I found that most of the websites use relative path to link to their internal pages. The browser is smart enough to convert those relative paths to absolute url and request the correct page whenever those relative paths are clicked. But, as it seems, PHP does not have any inbuilt support to convert those relative paths to absolute urls.\n\nTherefore, I decided to define a method to do the job. Here I am sharing my method of converting relative path to absolute url.\n\n## The Base\nThe first thing to mention is the base url. The relative paths are, actually, relative to the base url. If the page contains any `<base>` tag with its href attribute set, the browser will treat that url as base url. Otherwise, the browser will treat the url of the current page as the base url.\n\nNow first define a base url:\n```php\n$baseUrl = 'http://example.com/some/fake/path/page.html';\n```\n\nSo we are assuming that we are currently on this page and this url is our base url as defined with `$baseUrl`.\n\n## The Method\nAs the base url is set, its time to start defining the method:\n\n```php\nfunction absoluteUrl($relativeUrl, $baseUrl) {\n    // some codes to execute\n}\n```\n\nHere we will pass the relative path as the `$relativeUrl` and the base url as the `$baseUrl`. I decided to pass each and every path I encounter while crawling. Therefore the path may be an absolute one. So we have to keep that in mind.\n\nNow here is the body of the method:\n\n```php\nfunction absoluteUrl($relativeUrl, $baseUrl) {\n  \n    // Skip converting if the relative url like http://... or android-app://... etc.\n    if (preg_match('/[a-z0-9-]{1,}(:\\/\\/)/i', $relativeUrl)) {\n        return $relativeUrl;\n    }\n  \n    // Treat path as invalid if it is like javascript:... etc.\n    if (preg_match('/^[a-zA-Z]{0,}:[^\\/]{0,1}/i', $relativeUrl)) {\n        return NULL;\n    }\n  \n    // Convert //www.google.com to http://www.google.com\n    if(substr($relativeUrl, 0, 2) == '//') {\n        return 'http:' . $relativeUrl;\n    }\n  \n    // If the path is a fragment or query string,\n    // it will be appended to the base url\n    if(substr($relativeUrl, 0, 1) == '#' || substr($relativeUrl, 0, 1) == '?') {\n        return $baseUrl . $relativeUrl;\n    }\n  \n    // Treat paths with doc root, i.e, /about\n    if(substr($relativeUrl, 0, 1) == '/') {\n        return onlySitePath($baseUrl) . $relativeUrl;\n    }\n  \n    // For paths like ./foo, it will be appended to the furthest directory\n    if(substr($relativeUrl, 0, 2) == './') {\n        return uptoLastDir($baseUrl) . substr($relativeUrl, 2);\n    }\n  \n    // Convert paths like ../foo or ../../bar\n    if(substr($relativeUrl, 0, 3) == '../') {\n        $rel = $relativeUrl;\n        $base = uptoLastDir($baseUrl);\n        while(substr($rel, 0, 3) == '../') {\n            $base = preg_replace('/\\/([^\\/]+\\/)$/i', '/', $base);\n            $rel = substr($rel, 3);\n        }\n        return $base . $rel;\n    }\n  \n    // else\n    return uptoLastDir($baseUrl) . $relativeUrl;\n}\n```\n\nNow in the method you have found two another method `uptoLastDir()` and `onlySitePath()`. Here is those methods:\n\n```php\n// Get the root path from url\n// http://example.com/some/fake/path/page.html => http://example.com/\nfunction onlySitePath($url) {\n    $url = preg_replace('/(^https?:\\/\\/.+?\\/)(.*)$/i', '$1', $url);\n    return rtrim($url, '/');\n}\n\n// Get the path with last directory\n// http://example.com/some/fake/path/page.html => http://example.com/some/fake/path/\nfunction uptoLastDir($url) {\n    $url = preg_replace('/\\/([^\\/]+\\.[^\\/]+)$/i', '', $url);\n    return rtrim($url, '/') . '/';\n}\n```\n\n## Usage\n```php\necho absoluteUrl('/about', 'http://example.com/dir/');\n// Output: http://example.com/about\n\necho absoluteUrl('dir.html', 'http://example.com/dir/page.html');\n// Output: http://example.com/dir/dir.html\n\necho absoluteUrl('../../foo.html', 'http://example.com/dir/foo/bar/index.html')\n// Output: http://example.com/dir/foo.html\n```","data":{"slug":"convert-relative-path-to-absolute-url-with-php","date":"2013-09-03","title":"Convert Relative Path to Absolute URL with PHP","categories":["Responsive Website"],"tags":["absolute url","php","relative path"],"thumb":"creocraft-ventures-thumb.jpg","excerpt":""},"isEmpty":false,"excerpt":"","html":"<p>I was developing a Web Crawler with PHP. But whenever I was crawling a url to get the links from that url, I found that most of the websites use relative path to link to their internal pages. The browser is smart enough to convert those relative paths to absolute url and request the correct page whenever those relative paths are clicked. But, as it seems, PHP does not have any inbuilt support to convert those relative paths to absolute urls.</p>\n<p>Therefore, I decided to define a method to do the job. Here I am sharing my method of converting relative path to absolute url.</p>\n<h2>The Base</h2>\n<p>The first thing to mention is the base url. The relative paths are, actually, relative to the base url. If the page contains any <code>&#x3C;base></code> tag with its href attribute set, the browser will treat that url as base url. Otherwise, the browser will treat the url of the current page as the base url.</p>\n<p>Now first define a base url:</p>\n<pre><code class=\"hljs language-php\">$baseUrl = <span class=\"hljs-string\">'http://example.com/some/fake/path/page.html'</span>;</code></pre>\n<p>So we are assuming that we are currently on this page and this url is our base url as defined with <code>$baseUrl</code>.</p>\n<h2>The Method</h2>\n<p>As the base url is set, its time to start defining the method:</p>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">absoluteUrl</span><span class=\"hljs-params\">($relativeUrl, $baseUrl)</span> </span>{\n    <span class=\"hljs-comment\">// some codes to execute</span>\n}</code></pre>\n<p>Here we will pass the relative path as the <code>$relativeUrl</code> and the base url as the <code>$baseUrl</code>. I decided to pass each and every path I encounter while crawling. Therefore the path may be an absolute one. So we have to keep that in mind.</p>\n<p>Now here is the body of the method:</p>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">absoluteUrl</span><span class=\"hljs-params\">($relativeUrl, $baseUrl)</span> </span>{\n  \n    <span class=\"hljs-comment\">// Skip converting if the relative url like http://... or android-app://... etc.</span>\n    <span class=\"hljs-keyword\">if</span> (preg_match(<span class=\"hljs-string\">'/[a-z0-9-]{1,}(:\\/\\/)/i'</span>, $relativeUrl)) {\n        <span class=\"hljs-keyword\">return</span> $relativeUrl;\n    }\n  \n    <span class=\"hljs-comment\">// Treat path as invalid if it is like javascript:... etc.</span>\n    <span class=\"hljs-keyword\">if</span> (preg_match(<span class=\"hljs-string\">'/^[a-zA-Z]{0,}:[^\\/]{0,1}/i'</span>, $relativeUrl)) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">NULL</span>;\n    }\n  \n    <span class=\"hljs-comment\">// Convert //www.google.com to http://www.google.com</span>\n    <span class=\"hljs-keyword\">if</span>(substr($relativeUrl, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>) == <span class=\"hljs-string\">'//'</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'http:'</span> . $relativeUrl;\n    }\n  \n    <span class=\"hljs-comment\">// If the path is a fragment or query string,</span>\n    <span class=\"hljs-comment\">// it will be appended to the base url</span>\n    <span class=\"hljs-keyword\">if</span>(substr($relativeUrl, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>) == <span class=\"hljs-string\">'#'</span> || substr($relativeUrl, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>) == <span class=\"hljs-string\">'?'</span>) {\n        <span class=\"hljs-keyword\">return</span> $baseUrl . $relativeUrl;\n    }\n  \n    <span class=\"hljs-comment\">// Treat paths with doc root, i.e, /about</span>\n    <span class=\"hljs-keyword\">if</span>(substr($relativeUrl, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>) == <span class=\"hljs-string\">'/'</span>) {\n        <span class=\"hljs-keyword\">return</span> onlySitePath($baseUrl) . $relativeUrl;\n    }\n  \n    <span class=\"hljs-comment\">// For paths like ./foo, it will be appended to the furthest directory</span>\n    <span class=\"hljs-keyword\">if</span>(substr($relativeUrl, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>) == <span class=\"hljs-string\">'./'</span>) {\n        <span class=\"hljs-keyword\">return</span> uptoLastDir($baseUrl) . substr($relativeUrl, <span class=\"hljs-number\">2</span>);\n    }\n  \n    <span class=\"hljs-comment\">// Convert paths like ../foo or ../../bar</span>\n    <span class=\"hljs-keyword\">if</span>(substr($relativeUrl, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>) == <span class=\"hljs-string\">'../'</span>) {\n        $rel = $relativeUrl;\n        $base = uptoLastDir($baseUrl);\n        <span class=\"hljs-keyword\">while</span>(substr($rel, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>) == <span class=\"hljs-string\">'../'</span>) {\n            $base = preg_replace(<span class=\"hljs-string\">'/\\/([^\\/]+\\/)$/i'</span>, <span class=\"hljs-string\">'/'</span>, $base);\n            $rel = substr($rel, <span class=\"hljs-number\">3</span>);\n        }\n        <span class=\"hljs-keyword\">return</span> $base . $rel;\n    }\n  \n    <span class=\"hljs-comment\">// else</span>\n    <span class=\"hljs-keyword\">return</span> uptoLastDir($baseUrl) . $relativeUrl;\n}</code></pre>\n<p>Now in the method you have found two another method <code>uptoLastDir()</code> and <code>onlySitePath()</code>. Here is those methods:</p>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-comment\">// Get the root path from url</span>\n<span class=\"hljs-comment\">// http://example.com/some/fake/path/page.html => http://example.com/</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">onlySitePath</span><span class=\"hljs-params\">($url)</span> </span>{\n    $url = preg_replace(<span class=\"hljs-string\">'/(^https?:\\/\\/.+?\\/)(.*)$/i'</span>, <span class=\"hljs-string\">'$1'</span>, $url);\n    <span class=\"hljs-keyword\">return</span> rtrim($url, <span class=\"hljs-string\">'/'</span>);\n}\n\n<span class=\"hljs-comment\">// Get the path with last directory</span>\n<span class=\"hljs-comment\">// http://example.com/some/fake/path/page.html => http://example.com/some/fake/path/</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">uptoLastDir</span><span class=\"hljs-params\">($url)</span> </span>{\n    $url = preg_replace(<span class=\"hljs-string\">'/\\/([^\\/]+\\.[^\\/]+)$/i'</span>, <span class=\"hljs-string\">''</span>, $url);\n    <span class=\"hljs-keyword\">return</span> rtrim($url, <span class=\"hljs-string\">'/'</span>) . <span class=\"hljs-string\">'/'</span>;\n}</code></pre>\n<h2>Usage</h2>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-keyword\">echo</span> absoluteUrl(<span class=\"hljs-string\">'/about'</span>, <span class=\"hljs-string\">'http://example.com/dir/'</span>);\n<span class=\"hljs-comment\">// Output: http://example.com/about</span>\n\n<span class=\"hljs-keyword\">echo</span> absoluteUrl(<span class=\"hljs-string\">'dir.html'</span>, <span class=\"hljs-string\">'http://example.com/dir/page.html'</span>);\n<span class=\"hljs-comment\">// Output: http://example.com/dir/dir.html</span>\n\n<span class=\"hljs-keyword\">echo</span> absoluteUrl(<span class=\"hljs-string\">'../../foo.html'</span>, <span class=\"hljs-string\">'http://example.com/dir/foo/bar/index.html'</span>)\n<span class=\"hljs-comment\">// Output: http://example.com/dir/foo.html</span></code></pre>\n"},{"content":"HTML5 is the new definition of web designing. It has been designed to replace both HTML 4, XHTML, and the HTML DOM Level 2. HTML5 is specially designed to deliver rich content without the need for additional plugins. The current version delivers everything from animation to graphics, music to movies, and can also be used to build complicated web applications. HTML5 is also cross-platform. It is designed to work whether you are using a PC, or a Tablet, a Smartphone, or a Smart TV.\n\nLets discuss some advantages or beneficial features of HTML5.\n\n## Mutuality\nThe developers make websites highly interactive nowadays, to keep up with the demands of the user. For this purpose, they need to incorporate fluid animations, stream video, music and Social Network site links, like those of Facebook and Twitter, into the websites. Now, with the help of HTML5, it is possible to embed video & audio, high quality drawings, charts & animation and much more rich content, without using any plug-ins or any other computer programs.\n\n## Improved Codes\nHTML5 enables web designers to use cleaner, neater code, we can remove most div tags and replace them with semantic HTML5 elements.\n\n## Improved Semantics\nIt is now easy to see which parts of the page are headers, navigators, footers, aside functions, etc and most importantly, know what their meaning and purpose is in the whole format, as the tags for these functions are more specific. By using HTML5 elements, we can increase the semantic value of the web page, as the codes are very standardized.\n\n## Elegant Forms\nHTML5 enables designer to use fancier forms. It even makes form validation native to HTML, enables user interface enhancements and reduces need for JavaScript (but you need modern browser).\n\n## Consistency\nAs websites adopt the new HTML5 elements, we will see greater consistency in terms of the HTML used to code a web page. This will make it easier for designers and developers to immediately understand how a web page is structured.\n\n## Improved Accessibility\nHTML5 and its elements enable more detailed understanding of the structure of a page and make the technologies and features of web design more accessible.\n\n## Web Application Development\nMany new features and standards have emerged, as part of HTML5. Once you understand the available features in the browsers today, you can utilize them in your application and keep up with the changing trends. The main objective of HTML5 is to make web application easier with easy front-ends, drag and drop tools, discussion boards, wikis and other useful elements.\n\n## Offline Application Cache\nWhile building the site, a developer can now specify the files that he would want the browser to cache. This way, if you refresh the page when you are offline, the page will still load correctly. This has several advantages like offline browsing, files loading much faster and reduced load on the server.\n\n## User Database\nHTML5 has two storage devices – Session Storage and Local Storage, instead of the cookies, used to track user data, which could cause disadvantages with tedious repair procedures. It is not a permanent database, but enables you to store structured data, temporarily.\n\n## Geo-location\nGeo-location is used to track your location and share it with others. Your IP address, wireless network connection, the cell tower your phone is connected to, or the recent GPS hardware can all help in tracking your location. The new HTML5 Geo-location APIs make information, about your location, generated via GPS or other methods, directly available to any application with an HTML5-compatible browser.","data":{"slug":"advantages-html5","date":"2013-08-16","title":"Advantages of HTML5","categories":["Responsive Website"],"tags":["application cache","geo location","html5","user database"],"thumb":"creocraft-ventures-thumb.jpg","excerpt":""},"isEmpty":false,"excerpt":"","html":"<p>HTML5 is the new definition of web designing. It has been designed to replace both HTML 4, XHTML, and the HTML DOM Level 2. HTML5 is specially designed to deliver rich content without the need for additional plugins. The current version delivers everything from animation to graphics, music to movies, and can also be used to build complicated web applications. HTML5 is also cross-platform. It is designed to work whether you are using a PC, or a Tablet, a Smartphone, or a Smart TV.</p>\n<p>Lets discuss some advantages or beneficial features of HTML5.</p>\n<h2>Mutuality</h2>\n<p>The developers make websites highly interactive nowadays, to keep up with the demands of the user. For this purpose, they need to incorporate fluid animations, stream video, music and Social Network site links, like those of Facebook and Twitter, into the websites. Now, with the help of HTML5, it is possible to embed video &#x26; audio, high quality drawings, charts &#x26; animation and much more rich content, without using any plug-ins or any other computer programs.</p>\n<h2>Improved Codes</h2>\n<p>HTML5 enables web designers to use cleaner, neater code, we can remove most div tags and replace them with semantic HTML5 elements.</p>\n<h2>Improved Semantics</h2>\n<p>It is now easy to see which parts of the page are headers, navigators, footers, aside functions, etc and most importantly, know what their meaning and purpose is in the whole format, as the tags for these functions are more specific. By using HTML5 elements, we can increase the semantic value of the web page, as the codes are very standardized.</p>\n<h2>Elegant Forms</h2>\n<p>HTML5 enables designer to use fancier forms. It even makes form validation native to HTML, enables user interface enhancements and reduces need for JavaScript (but you need modern browser).</p>\n<h2>Consistency</h2>\n<p>As websites adopt the new HTML5 elements, we will see greater consistency in terms of the HTML used to code a web page. This will make it easier for designers and developers to immediately understand how a web page is structured.</p>\n<h2>Improved Accessibility</h2>\n<p>HTML5 and its elements enable more detailed understanding of the structure of a page and make the technologies and features of web design more accessible.</p>\n<h2>Web Application Development</h2>\n<p>Many new features and standards have emerged, as part of HTML5. Once you understand the available features in the browsers today, you can utilize them in your application and keep up with the changing trends. The main objective of HTML5 is to make web application easier with easy front-ends, drag and drop tools, discussion boards, wikis and other useful elements.</p>\n<h2>Offline Application Cache</h2>\n<p>While building the site, a developer can now specify the files that he would want the browser to cache. This way, if you refresh the page when you are offline, the page will still load correctly. This has several advantages like offline browsing, files loading much faster and reduced load on the server.</p>\n<h2>User Database</h2>\n<p>HTML5 has two storage devices – Session Storage and Local Storage, instead of the cookies, used to track user data, which could cause disadvantages with tedious repair procedures. It is not a permanent database, but enables you to store structured data, temporarily.</p>\n<h2>Geo-location</h2>\n<p>Geo-location is used to track your location and share it with others. Your IP address, wireless network connection, the cell tower your phone is connected to, or the recent GPS hardware can all help in tracking your location. The new HTML5 Geo-location APIs make information, about your location, generated via GPS or other methods, directly available to any application with an HTML5-compatible browser.</p>\n"},{"content":"Drop Cap is a traditional newspaper technique of making the first letter of a paragraph capital and take the height of three or four lines. In that way, it is easier to grab the attention of the reader and specify the start of a section.\n\nIn this tutorial we are going to implement that style in our css using a new CSS3 technique.\n\n## CSS First Letter\nCSS allows you to add a property `:first-letter` which as you can guess allows you to style the first letter of the element.\n\nConsider this paragraph:\n```html\n<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut in metus nec mauris egestas laoreet. Integer vehicula velit non massa suscipit at porta sem commodo. Sed suscipit facilisis mi, eu laoreet est gravida eu.</p>\n```\n\nWe can add the drop cap style to the paragraph using `:first-letter`\n\n```css\np:first-letter {\n    display:block;\n    float:left;\n    font-family:inherit;\n    font-size: 360%;\n    font-weight: bold;\n    line-height: 85%;\n    margin-right: 8px;\n    margin-top: 5px;\n}\n```\n\nThis css will stylize the first letter exactly how we want.","data":{"slug":"how-to-create-drop-cap-letters-in-css","date":"2013-07-23","title":"How to Create Drop Cap Letters in CSS","categories":["Responsive Website"],"tags":["css","css3","drop cap","how to","typography"],"thumb":"creocraft-ventures-thumb.jpg","excerpt":""},"isEmpty":false,"excerpt":"","html":"<p>Drop Cap is a traditional newspaper technique of making the first letter of a paragraph capital and take the height of three or four lines. In that way, it is easier to grab the attention of the reader and specify the start of a section.</p>\n<p>In this tutorial we are going to implement that style in our css using a new CSS3 technique.</p>\n<h2>CSS First Letter</h2>\n<p>CSS allows you to add a property <code>:first-letter</code> which as you can guess allows you to style the first letter of the element.</p>\n<p>Consider this paragraph:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut in metus nec mauris egestas laoreet. Integer vehicula velit non massa suscipit at porta sem commodo. Sed suscipit facilisis mi, eu laoreet est gravida eu.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></code></pre>\n<p>We can add the drop cap style to the paragraph using <code>:first-letter</code></p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">p</span><span class=\"hljs-selector-pseudo\">:first-letter</span> {\n    <span class=\"hljs-attribute\">display</span>:block;\n    <span class=\"hljs-attribute\">float</span>:left;\n    <span class=\"hljs-attribute\">font-family</span>:inherit;\n    <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">360%</span>;\n    <span class=\"hljs-attribute\">font-weight</span>: bold;\n    <span class=\"hljs-attribute\">line-height</span>: <span class=\"hljs-number\">85%</span>;\n    <span class=\"hljs-attribute\">margin-right</span>: <span class=\"hljs-number\">8px</span>;\n    <span class=\"hljs-attribute\">margin-top</span>: <span class=\"hljs-number\">5px</span>;\n}</code></pre>\n<p>This css will stylize the first letter exactly how we want.</p>\n"},{"content":"Numerous devices which successfully displayed animated images were introduced well before the advent of the motion picture. These devices were used to entertain, amaze and sometimes even frighten people. The majority of these devices did not project their images and accordingly could only be viewed by a single person at any one time. For this reason, they were considered toys rather than being a large scale entertainment industry like later animation. Many of these devices are still built by and for film students being taught the basic principles of animation.\n\n## The Magic Lantern (c. 1650)\nThe Magic Lantern is an early predecessor of the modern day projector. It consists of a translucent oil painting, a simple lens and a candle or oil lamp. In a darkened room, the image would appear projected onto an adjacent flat surface. It was often used to project demonic, frightening images in order to convince people that they were witnessing the supernatural. Some slides for the lanterns contained moving parts which makes the Magic Lantern the earliest known example of projected animation. The origin of the Magic Lantern is debated, but in the 15th century the Venetian inventor Giovanni Fontana published an illustration of a device which projected the image of a demon in his Liber Instrumentorum. The earliest known actual magic lanterns are usually credited to Christiaan Huygens or Athanasius Kircher.\n\n## Thaumatrope (1824)\nA thaumatrope was a simple toy used in the Victorian era. A thaumatrope is a small circular disk or card with two different pictures on each side that was attached to a piece of string or a pair of strings running through the centre. When the string is twirled quickly between the fingers, the two pictures appear to combine into a single image. The thaumatrope demonstrates the Phi phenomenon, the brain’s ability to persistently perceive an image. Its invention is often credited to Sir John Herschel. John A. Paris popularized the invention when he used one to illustrate the Phi phenomenon in 1824 to the Royal College of Physicians.\n\n## Phenakistoscope (1831)\nThe phenakistoscope was an early animation device. It was invented in 1831 simultaneously by the Belgian Joseph Plateau and the Austrian Simon von Stampfer. It consists of a disk with a series of images, drawn on radii evenly spaced around the center of the disk. Slots are cut out of the disk on the same radii as the drawings, but at a different distance from the center. The device would be placed in front of a mirror and spun. As the phenakistoscope is spun, a viewer would look through the slots at the reflection of the drawings which would only become visible when a slot passes by the viewer’s eye. This created the illusion of animation.\n\n## Zoetrope (180 AD; 1834)\nThe zoetrope concept was suggested in 1834 by William George Horner, and from the 1860s marketed as the zoetrope. It operates on the same principle as the phenakistoscope. It was a cylindrical spinning device with several frames of animation printed on a paper strip placed around the interior circumference. There are vertical slits around the sides through which an observer can view the moving images on the opposite side when the cylinder spins. As it spins the material between the viewing slits moves in the opposite direction of the images on the other side and in doing so serves as a rudimentary shutter. The zoetrope had several advantages over the basic phenakistoscope. It didn’t require the use of a mirror to view the illusion, and because of its cylindrical shape it could be viewed by several people at once.\n\nIn China around 180 AD the prolific inventor [Ting Huan] invented a device similar to the modern zoetrope. It was made of translucent paper or mica panels and was operated by being hung over a lamp so that vanes at the top would rotate as they came in contact with the warm air currents rising from the lamp. It has been stated that this rotation, if it reached the ideal speed triggered the same illusion of quick animation as the later zoetrope, but since there was no \"shutter\" (the slots in a zoetrope), the effect was in fact simply a series of horizontally drifting figures, with no true animation.\n\n## Flip book (1868)\nThe first flip book was patented in 1868 by John Barnes Linnett as the kineograph. A flip book is just a book with particularly springy pages that have an animated series of images printed near the unbound edge. A viewer bends the pages back and then rapidly releases them one at a time so that each image viewed springs out of view to momentarily reveal the next image just before it does the same. They operate on the same principle as the phenakistoscope and the zoetrope what with the rapid replacement of images with others, but they create the illusion without any thing serving as a flickering shutter as the slits had in the previous devices. They accomplish this because of the simple physiological fact that the eye can focus more easily on stationary objects than on moving ones. Flip books were more often cited as inspiration by early animated filmmakers than the previously discussed devices which didn’t reach quite as wide of an audience. In previous animation devices the images were drawn in circles which meant diameter of the circles physically limited just how many images could reasonably be displayed. While the book format still brings about something of a physical limit to the length of the animation, this limit is significantly longer than the round devices. Even this limit was able to be broken with the invention of themutoscope in 1894. It consisted of a long circularly bound flip book in a box with a crank handle to flip through the pages.\n\n## Praxinoscope (1877)\nThe first animated projection (screening) was created in France, by Charles-Emile Reynaud, who was a French science teacher. Reynaud created the Praxinoscope in 1877 and the Theatre Optique in December 1888. On 28 October 1892, he projected the first animation in public, Pauvre Pierrot, at the Musee Grevin in Paris. This film is also notable as the first known instance of film perforations being used. His films were not photographed, but drawn directly onto the transparent strip. In 1900, more than 500,000 people had attended these screenings.","data":{"slug":"early-devices-to-project-animation-before-films","date":"2013-06-05","title":"Early Devices to Project Animation before Films","categories":["Responsive Website"],"tags":["animation","devices","flip book","magic lantern","phenakistoscope","praxinoscope","thaumatrope","zoetrope"],"thumb":"creocraft-ventures-thumb.jpg","excerpt":""},"isEmpty":false,"excerpt":"","html":"<p>Numerous devices which successfully displayed animated images were introduced well before the advent of the motion picture. These devices were used to entertain, amaze and sometimes even frighten people. The majority of these devices did not project their images and accordingly could only be viewed by a single person at any one time. For this reason, they were considered toys rather than being a large scale entertainment industry like later animation. Many of these devices are still built by and for film students being taught the basic principles of animation.</p>\n<h2>The Magic Lantern (c. 1650)</h2>\n<p>The Magic Lantern is an early predecessor of the modern day projector. It consists of a translucent oil painting, a simple lens and a candle or oil lamp. In a darkened room, the image would appear projected onto an adjacent flat surface. It was often used to project demonic, frightening images in order to convince people that they were witnessing the supernatural. Some slides for the lanterns contained moving parts which makes the Magic Lantern the earliest known example of projected animation. The origin of the Magic Lantern is debated, but in the 15th century the Venetian inventor Giovanni Fontana published an illustration of a device which projected the image of a demon in his Liber Instrumentorum. The earliest known actual magic lanterns are usually credited to Christiaan Huygens or Athanasius Kircher.</p>\n<h2>Thaumatrope (1824)</h2>\n<p>A thaumatrope was a simple toy used in the Victorian era. A thaumatrope is a small circular disk or card with two different pictures on each side that was attached to a piece of string or a pair of strings running through the centre. When the string is twirled quickly between the fingers, the two pictures appear to combine into a single image. The thaumatrope demonstrates the Phi phenomenon, the brain’s ability to persistently perceive an image. Its invention is often credited to Sir John Herschel. John A. Paris popularized the invention when he used one to illustrate the Phi phenomenon in 1824 to the Royal College of Physicians.</p>\n<h2>Phenakistoscope (1831)</h2>\n<p>The phenakistoscope was an early animation device. It was invented in 1831 simultaneously by the Belgian Joseph Plateau and the Austrian Simon von Stampfer. It consists of a disk with a series of images, drawn on radii evenly spaced around the center of the disk. Slots are cut out of the disk on the same radii as the drawings, but at a different distance from the center. The device would be placed in front of a mirror and spun. As the phenakistoscope is spun, a viewer would look through the slots at the reflection of the drawings which would only become visible when a slot passes by the viewer’s eye. This created the illusion of animation.</p>\n<h2>Zoetrope (180 AD; 1834)</h2>\n<p>The zoetrope concept was suggested in 1834 by William George Horner, and from the 1860s marketed as the zoetrope. It operates on the same principle as the phenakistoscope. It was a cylindrical spinning device with several frames of animation printed on a paper strip placed around the interior circumference. There are vertical slits around the sides through which an observer can view the moving images on the opposite side when the cylinder spins. As it spins the material between the viewing slits moves in the opposite direction of the images on the other side and in doing so serves as a rudimentary shutter. The zoetrope had several advantages over the basic phenakistoscope. It didn’t require the use of a mirror to view the illusion, and because of its cylindrical shape it could be viewed by several people at once.</p>\n<p>In China around 180 AD the prolific inventor [Ting Huan] invented a device similar to the modern zoetrope. It was made of translucent paper or mica panels and was operated by being hung over a lamp so that vanes at the top would rotate as they came in contact with the warm air currents rising from the lamp. It has been stated that this rotation, if it reached the ideal speed triggered the same illusion of quick animation as the later zoetrope, but since there was no \"shutter\" (the slots in a zoetrope), the effect was in fact simply a series of horizontally drifting figures, with no true animation.</p>\n<h2>Flip book (1868)</h2>\n<p>The first flip book was patented in 1868 by John Barnes Linnett as the kineograph. A flip book is just a book with particularly springy pages that have an animated series of images printed near the unbound edge. A viewer bends the pages back and then rapidly releases them one at a time so that each image viewed springs out of view to momentarily reveal the next image just before it does the same. They operate on the same principle as the phenakistoscope and the zoetrope what with the rapid replacement of images with others, but they create the illusion without any thing serving as a flickering shutter as the slits had in the previous devices. They accomplish this because of the simple physiological fact that the eye can focus more easily on stationary objects than on moving ones. Flip books were more often cited as inspiration by early animated filmmakers than the previously discussed devices which didn’t reach quite as wide of an audience. In previous animation devices the images were drawn in circles which meant diameter of the circles physically limited just how many images could reasonably be displayed. While the book format still brings about something of a physical limit to the length of the animation, this limit is significantly longer than the round devices. Even this limit was able to be broken with the invention of themutoscope in 1894. It consisted of a long circularly bound flip book in a box with a crank handle to flip through the pages.</p>\n<h2>Praxinoscope (1877)</h2>\n<p>The first animated projection (screening) was created in France, by Charles-Emile Reynaud, who was a French science teacher. Reynaud created the Praxinoscope in 1877 and the Theatre Optique in December 1888. On 28 October 1892, he projected the first animation in public, Pauvre Pierrot, at the Musee Grevin in Paris. This film is also notable as the first known instance of film perforations being used. His films were not photographed, but drawn directly onto the transparent strip. In 1900, more than 500,000 people had attended these screenings.</p>\n"}]}